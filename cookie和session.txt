Cookie是用来解决HTTP协议无状态缺陷的一种补充机制，存储在客户端上。
	用户第一次登录后，服务器会返回cookie给浏览器，浏览器会将cookie保存到本地，当该用户发送第二次请求时，会自动将上次存储的cookie数据自动携带给服务器。服务器根据http请求中携带的cookie来判断当前的用户是哪一个。
	cookie不宜存储过多数据，通常大小不超过4kb

cookie失效分为2种：
	1. 设置失效时间，这种cookie会保存在硬盘中。保存在硬盘上的cookie可以在不同的浏览器进程间共享；
	2. 不设置失效时间，这种cookie保存在内存中，关闭浏览器就会失效，对于共享这种cookie，不同的浏览器有不同的处理方式。（也被称为会话cookie）

Session的作用和cookie类似，通常和cookie结合使用
	使用session和cookie通常有两种方案
		*session存储在服务端：通过cookie存储一个session_id，具体数据保存在服务端的session中。如果用户已经登录，服务器会在cookie中保存一个session_id，下次请求的时候，会把该session_id携带上来，服务器根据session_id在session库中获取用户的session数据，就能知道该用户是谁，以及之前保存的一些状态信息。这种方式的专业术语叫做server side session
		*session存储在客户端：将session数据加密，然后存储在cookie中。这种方式的专业术语叫做client side session。flask采用这种方式
		
Cookie与session的区别
	Cookie往往保存了用户的所有信息（即客户端保存了用户所有信息），存在更多的安全隐患，因为JavaScript通常可以操作cookie，可以修改或者清除用户信息，达到伪造的目的。而session机制是由服务器根据用户生成一串难以伪造的唯一的sessionid，这串sessionid通常由客户通过cookie进行保存传递，服务器根据每次http请求携带的sessionid，查询并得到用户所有信息。

		
使用JavaScript创建或修改cookie：
	*document.cookie = "username=John";
	为cookie添加一个过期时间
	*document.cookie = "username=John; expires=Thu, 18 Dec 2019 12:00:00 GMT";

使用JavaScript读取cookie：
	var x = document.cookie;

使用JavaScript删除cookie：
	删除cookie的方式是给cookie设置以前的时间。例如
	document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 GMT"
	注意，删除cookie时不需要指定cookie的值。
	注意，使用documen.cookie方式获取cookie将得到以分号隔开的所有cookie，例如：username="John"; gender="male"; age="26"

	
JavaScript操作cookie的实例：
	*设置cookie:
		function setCookie (cname, cvalue, exdays) {
			let d = new Date();
			d.setTime(d.getTime() + (exdays * 24 * 3600 * 1000));
			let expires = "expires=" + d.toGMTString();
			document.cookie = cname + "=" + cvalue + ";" + expires;
		}
	*获取cookie
		function getCookie (cname) {
			let name = cname + "=";
			let cookieArr = document.cookie.split(";");
			for (let item of cookieArr) {
				let cookie = item.trim();
				if (cookie.indexOf(name) === 0) {
					return cookie.substring(name.length, cookie.length);
				}
			}
			return "";
		}
	
	
在flask中操作cookie，需要通过response对象进行操作
	使用举例：
		from flask import request, jsonify, make_response
		
		# 获取某个cookie
		username = request.cookies.get("username")
		
		if username is not None:
			# 添加cookie
			response.set_cookie = ("date", "20200218")
			# 设置返回数据
			response = make_response(jsonify({"status": "success", "value": [1,2,3]}))
			return response
			
		























