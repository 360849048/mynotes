测试的基本原则
	* 所有测试追溯到用户需求
	* 应及早，并不断的测试
		对应开发的瀑布模型，测试有W模型与之每一步骤相对应，及早发现问题，缩短项目周期
	* 测试工作要由专业人员来执行
	* 80%的错误出现在20%的模块中
	* 设计测试用例（测什么？怎么测？）时，要考虑各种情况
		占了测试的大部分时间
	* 一定要写缺陷报告
	* 制定严格的测试计划
	* 测试不可能做到完全，注意问题的轻重
	* 回归测试（指修改就代码后，要确认有没有引入新的问题）
	* 妥善保管一切测试文档


软件质量模型（ISO9126）
	1. 功能性
		软件产品在指定条件下使用时，提供满足明确和隐含要求的功能和能力。
	2. 可靠性
		在特定条件下使用时，软件产品维持规定的性能级别能力。第一层：软件最好不要出故障；第二层：软件出现故障不要影响主要的功能和业务；第三层：如果影响了主要功能和业务，系统可以尽快定位并恢复
	3. 易用性
		在指定条件下使用软件产品时，产品被用户理解、学习、使用和吸引用户的能力，即用户体验
	4. 效率
		即产品性能
	5. 维护性
		软件产品可被修改的能力，这里的修改指纠正、改进软件产品和软件产品对环境、功能规格变化的适应性
	6. 可移植性
		软件产品从一个环境迁移到另外一个环境的能力


软件质量模型保证（SQA）
	目的：软件的制作的过程对于领导层是可见的
	定义：它是一套计划和方法来向领导层保证
	五个基本目标：
		1. 保证有计划地进行
		2. 保证遵循了步骤和需求
		3. 及时通知给对应人员
		4. 高管可以接触到项目内部
		5. 软件质量需要测试工作来保证
	qc：检验产品的质量，保证产品符合客户需求
	qa：审计过程的质量，保证测试过程被正确执行
	通俗来讲，测试员是qc，测试员的小领导是qa
	

软件测试的基本流程
	1. 需求分析
	2. 编写测试用例（测什么？怎么测？）时，要考虑各种情况
	3. 评审测试用例
	4. 搭建测试环境
	5. 等待开发提交测试包
	6. 部署测试包
	7. 冒烟测试（对软件主体基本功能继续基本测试）
	8. 执行测试用例
	9. BUG跟踪处理（提交及回归测试）
	10. 多轮测试后软件符合要求
	11. 测试结束
	
	
测试分类
	按测试阶段划分
		单元测试（
			程序的最小模块完成后进行测试
				可能是一个函数，类，也可能是界面
			单元测试属于白盒测试，可能需要创建驱动模块、桩模块来模拟所测模块的主程序和子模块
		集成测试
			组装测试，在单元测试基础上，把多个模块组装到一起测试，主要测试各个单元之间的接口，另外测试组装之后是否能实现预定功能？数据传递时是否会丢失？模块之间是否会相互影响？模块之间的累计误差是否会放大？
		系统测试
			把软件项目作为一个整体进行测试，与硬件、网络、外设、数据，在实际或模拟环境下及逆行测试，测试的依据是需求说明书
		验收测试
			从用户角度进行测试
				α测试
					1.Alpha是内测版本
					2.通常在软件开发者内部交流
					3.bug较多，普通用户最好不好下载
				β测试
					1.Beta是公测版本，是对所有用户开放的测试版本
					2.通常由公司免费发布，用户可从相关站点下载
					3.通过一些专业爱好者的测试，将结果反馈给开发者
				γ测试
					Gamma版本，指软件正式发行的候选版，该版本已经相当成熟
	
	按是否查看源代码划分
		黑盒测试
			只测试功能，不关注具体实现方式
		白盒测试
			不但关注测试，还要关注实现
		灰盒测试
			介于黑盒和白盒之间的测试，比如接口测试
			
	按是否运行分类
		静态测试
			不运行软件，静态地观察软件是否符合预期
		动态测试
			运行软件，在运行过程中测试
	
	按是否自动化
		手动测试
		自动化测试
	
	其他分类
		冒烟测试
			对软件最基本的流程和工作做一个粗略的测试，看最基本的流程能否跑通
			一般是从研发拿到的第一个版本
		回归测试
			当修复一个bug后，把之前的测试用例在新的代码下进行再次测试（视项目进度决定是否重新按测试用例全部重测）
		随机测试
			针对软件中的重要功能进行复测
		探索性测试
			一般了解和学习项目，一边测试项目
			
			
测试用例(Test case)
	定义：
		为特定的目的而设计的一组测试输入，执行条件和预期结果的文档
	八大要素：
		用例编号
		用例标题
		所属项目
		用例级别
		预置条件
		测试数据
		执行步骤
		预期结果
	测试用例设计方法：
		等价类划分法（用来确定测试数据的）
			概念：
				在所有测试的数据中，具有某种共同特征的数据子集
			等价类分为：
				有效等价类：满足需求的数据
				无效等价列：不满足需求的数据
			
		边界值法
			概念：
				选取正好等于、刚好超过或刚好小于边界的值作为测试数据
				上点：边界上的点（正好等于）
				离点：距离上点最近的点
				内点：范围内的点
		
		等价类划分和边界值着重考虑单个输入的输入条件，但是没有考虑输入条件的各种组合、输入条件与输出条件之间的相互制约关系。此时应该用判定表法来编写测试用例。
		判定表法（注意不能拿判定表作为测试用例）
			概念：
				有多个输入，和多个输出，而且输入和输出之间有相互的组合关系、输入和输出之间有相互的依赖关系
			条件桩：所有输入，顺序无关
			动作桩：所有输出，顺序无关
			条件项：把条件桩中所有可能出现的组合都罗列出来
			动作项：根据不同条件项的组合产生的动作结果
		
		因果图法

			
软件缺陷
	定义：软件中存在的各种问题
	软件缺陷的判定标准：
		软件未达到需求规格说明书标明的功能
		软件出现了需求说明书指明不会出现错误的地方
		软件超出了需求说明书指明的范围
		软件出现了需求说明书虽未指明，但应该达到的地方
		软件难以使用，效率低下
	软件缺陷产生的根源：
		需求的变更
		交流不充分
		软件的复杂性
		进度压力
	软件缺陷信息
		*缺陷ID
		*缺陷状态
			new（新建状态）
			open（确认缺陷有效）
			fixed（由缺陷处理人处理完成之后设置）
			closed（由验证人填写）
			rejected（拒绝修改）
			postpone（拖延状态）
		*缺陷标题
		*缺陷的严重程序
			Critical
			VeryHigh
			High
			Medium
			Low
		*缺陷的优先级
			Urgent
			VeryHigh
			High
			Medium
			Low
		*缺陷所属模块
		缺陷记录者
		缺陷提交时间
		缺陷处理人
		处理结果描述
		缺陷处理时间
		缺陷验证人
		缺陷结果描述
		*缺陷详细描述
		缺陷环境说明
		必要的附件
	缺陷报告模板（仅供参考）：
		ID	功能模块	严重程序	优先级	bug类型	测试环境	状态	缺陷描述	预置条件	重现步骤	期望结果	实际结果	附件	测试人员	解决方案	创建日期	解决日期
	缺陷报告注意事项
		软件缺陷难以避免，但缺陷报告不能有缺陷
		尽量确保缺陷可以重现
		简介、准确、完整
		一个缺陷一个报告
		避免使用我、你等人称代替，可以直接使用动词或这必要时使用“用户”代替
		避免使用情绪化的语言和强调符号
		避免使用“似乎”、“看起来可能”等含义模糊的词汇，需要报告确定的缺陷结果
		避免提交不确定的测试问题，自己至少需要重现一次再提交
	缺陷处理流程
		提交 -> 分配 -> 确认 -> 处理 -> 复测 -> 关闭