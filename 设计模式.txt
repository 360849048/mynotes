* 创建型模式
    * 简单工厂模式
        简单工厂模式又称为“静态工厂方法模式”，它属于类创建型模式。在这个模式中，可以根据参数的不同返回【不同类的实例】，这些被创建的实例通常具有共同的父类。
        简单工厂模式包含三个角色：
            工厂
                负责实现创建所有实例的内部逻辑
            抽象产品
                负责描述所有实例所共有的公共接口
            具体产品
                被创建的目标实例，所有被创建得到的对象都充当这个角色的某个具体类的实例
        简单工厂的要点：
            当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。
        优点：
            将对象的创建交给了专门的工厂类负责，实现对象的创建和对象的使用分离，对于一些复杂的类名，通过简单工厂模式可以只需要知道具体产品所对应的的参数即可，减少了使用者的记忆量。另外可以引用配置文件等方式，在不修改任何客户端代码的情况下更换和增加新的具体产品类，这在一定程度上提高了系统的灵活性。
        缺点：
            工厂类不够灵活，当增加新的具体产品需要工厂类的判断逻辑代码，而且产品较多时，工厂方法会很复杂。
        适用场景：
            工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。
	* 工厂方法模式
		工厂方法模式又称“工厂模式”，也叫虚拟构造器模式或多态工厂模式。在这个模式中，工厂父类负责定义创建产品对象的公共接口，工厂子类负责生成具体的产品对象。相对简单工厂模式，工厂方法模式更符合开闭原则。
		工厂方法模式包含四个角色：
			抽象工厂
			具体工厂
			抽象产品
			具体产品
		优点：
			工厂方法模式的优点主要是相对简单工厂模式的，它更符合开闭原则，在添加新产品的时候无需修改原有代码。
            
            
            
*