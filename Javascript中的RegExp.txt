*正则的两种写法
	var re = /a/;               //一般情况下都用简写的方式  性能好
	var re = new RegExp('a');    //需要传入参数的时候用
	
*转义字符(来源于网上，尚未确认其正确性)
	\n   换行
	\r   制表
	\t   回车 
	\s   空格
	\S   非空格
	\d   数字
	\D   非数字
	\w   字符 ( 字母 ，数字，下划线_ )
	\W   非字符
	.    任意字符
	\.   真正的点
	\b   独立的部分 （ 起始，结束，空格 ）
	\B   独立的部分
	\1   重复的第一个子项
	\2   重复的第二个子项
	[\u4e00-\u9fa5] 中文
	
*[]的用法
	[]中的字符表示“或”的关系，例如/[abc]/表示匹配a或b或c任意一个字符
	[]中的^表示取反，代表排除的意思，例如/[^abc]/表示匹配字符不能有a或b或c，有任意一个就匹配失败。
	
*()的用法
	()不会影响匹配成功与否，但是它可以顺便将匹配得到的字符串进行分割
	例如：/(\d+)(\.js$)/.exec('123.js')可以匹配成功，并且得到一个类似数组的对象，里面包含123.js, 123, js。
	
*匹配次数的限定
	{n,}	至少n次
	*		任意次，相当于{0,}
	？		零次或1次，相当于{0,1}
	+		一次及以上，相当于{1，}
	{n}		正好n次

*^表示开始，$表示结束

*常用的后缀
	*i
		忽略大小写
	*g
		全局匹配
	*m
		多行匹配
	例如/a\ab/ig可以匹配多个包含AB或aB的字符串
	
*常用的函数
	*search
		匹配成功返回位置，否则返回-1（与字符串的indexOf类似）
		用法：字符串.search(正则)
	*match
		匹配成功返回类似数组的一个对象，否则返回null
		用法：字符串.match(正则)
	*replace
		通过正则的方法替换字符串中的内容
		用法：字符串.replace(正则，新字符串)
	*test
		根据是否匹配成功返回true和false。
		用法：正则.test(字符串)
	*exec
		匹配成功返回类似数组的一个对象，否则返回null
		用法：正则.exec(字符串)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	