hash算法		
	常用hash算法：
	*MD4(Message Digest消息摘要)：基于32位操作数的位操作来实现
	*MD5：它是MD4的改进版本，更安全，输出长度128bit
	*SHA1及其他：更好的安全性，输出长度160bit。SHA256和SHA512更安全，但是速度更慢，而且输出结果更长。


	hash加盐
	常用在数据库密码的存储中，起作用是，防止hash值泄露后，黑客采用查表法破解密码
	存储示例：
	username	password hash value									salt
	adam		1d7c2923c1684726dc23d2901c4d8157					20b9c603-69b5-4931-93fe-7e94c45e6cdf

	其中salt是系统生成的随机字符串。将salt和原始密码连接（一般放前面或者后面都可以），然后将连接后得到的新字符串进行hash计算得到password hash并存储。
	
	关于密码破解的扩展：
		黑客获取到密码hash值后，可以通过暴力破解来获取密码明文，但是这种方法效率很低，非常耗费时间。另外可以通过常见的一些密码，预先生成一份“密码--hash”字典，这样可以提高破解效率，但是这种方法及其占用存储空间。还有一种时间和空间折中的破解法，称为彩虹表，其基本原理为：由hash值经由函数R生成一串明文，再有这串明文，经由函数H再次生成一串新的hash值，再重复上面的步骤n次，期间记录所有新生成的hash值和明文，这个过程重复2000次以上，这样hash值--明文--hash值--明文--...--明文的结构表称为哈希链。最后将哈希链的第一个hash值和最后一个明文形成一个数组对存入表中，由多个数组对构成的表称为彩虹表。其中关键难度是R函数的构建，它需要保证哈希链中尽量少的出现重复的明文。通常彩虹表会使用在每一步使用不同的R函数，从而避免哈希链中重复节点的出现。彩虹表对于破解密码有这很高的效率，对于未作加盐防护的密码，在彩虹表面前基本不堪一击，但是采用暴力破解可能需要几周的时间。

		
对称加密算法：
	对称加密又称共享密钥加密算法，加密和解密使用同一个密钥，这就要求加密和解密方事先都知道这个密钥。这个密钥往往通过非对称加密算法加密这个密钥，然后再通过网络传输给对方。或者面对面商量这个密钥。
	常见的对称加密算法：
	*DES，安全性较差
	*3DES，DES的升级版，但是安全性仍然较差，用的不多。
	*AES(Advance Encryption Standard高级加密标准)，常见的有AES128、AES192和AES256，是目前主流的对称加密算法，它的运算性能和安全性能较DES和3DES提升了很多。
	
		
		
非对称加密算法：
	非对称加密算法又称公开密钥加密算法，加密和解密使用两个不同的密钥。这两个密钥分别称为公钥和密钥，公钥加密的只能由私钥解密，私钥加密的只能由公钥加密。其中私钥加密通常用于数字签名。
	非对称加密算法相对与对称加密，速度非常慢。一般用它传输对称加密的密钥或者数字签名。它和对称加密在HTTPS的安全传输中起到重要作用。
	*RSA，目前最常用的非对称加密算法，RSA的安全性基于这样的事实：大整数的因式分解在数学上是非常困难的，但这个未能在理论上得到证明。
	*DSA，安全性和RSA差不多，也是基于数学难题。它和RSA各有优势。
	*ECC，相对于RSA算法，ECC的密钥很短，但是加密和解密非常耗费CPU资源



什么是数字签名？
	数字签名的作用是保护原数据不被篡改。
	数字签名的创建过程为：先对原数据进行hash计算，然后使用非对称加密的私钥对hash值进行加密，这样就得到了数字签名。
	验证签名的过程为：使用公钥对数字签名进行解密，得到一串hash值；同时对原数据进行hash计算，也得到一串hash值。比较两者得到的hash值，如果一致说明原数据未被篡改。
	
	
	