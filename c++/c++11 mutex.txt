std::mutex mtx
    创建一个互斥锁
mtx.lock()
    * 如果该互斥量当前没有被锁住，则调用线程将该互斥量锁住，直到调用 unlock之前，该线程一直拥有该锁
    * 如果当前互斥量被其他线程锁住，则当前的调用线程被阻塞住。
    * 如果当前互斥量被当前调用线程锁住，则会产生死锁(deadlock)

mtx.unlock()
    解锁，释放对互斥量的所有权
    
mtx.try_lock()
    * 如果当前互斥量没有被其他线程占有，则该线程锁住互斥量，直到该线程调用 unlock 释放互斥量
    * 如果当前互斥量已经被锁住，则当前调用线程返回 false，而并不会被阻塞掉

std::recursive_mutex
    std::recursive_mutex 与 std::mutex 一样，也是一种可以被上锁的对象，但是和 std::mutex 不同的是，std::recursive_mutex 允许同一个线程对互斥量多次上锁（即递归上锁），来获得对互斥量对象的多层所有权，std::recursive_mutex 释放互斥量时需要调用与该锁层次深度相同次数的 unlock()，可理解为 lock() 次数和 unlock() 次数相同，除此之外，std::recursive_mutex 的特性和 std::mutex 大致相同

std::timed_mutex
    比std::mutex多了两个成员函数：try_lock_for() 和 try_lock_until()
    try_lock_for 函数接受一个时间范围，表示在这一段时间范围之内线程如果没有获得锁则被阻塞住（与 std::mutex 的 try_lock() 不同，try_lock 如果被调用时没有获得锁则直接返回 false），如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false
    try_lock_until 函数则接受一个时间点作为参数，在指定时间点未到来之前线程如果没有获得锁则被阻塞住，如果在此期间其他线程释放了锁，则该线程可以获得对互斥量的锁，如果超时（即在指定时间内还是没有获得锁），则返回 false

std::recursive_timed_mutex
    和 std:recursive_mutex 与 std::mutex 的关系一样，std::recursive_timed_mutex 的特性也可以从 std::timed_mutex 推导出来
    
std::lock_guard
    lock_guard可以管理mutex，recursive_mutex，timed_mutex和recursive_timed_mutex，构造时上锁并在析构时解锁
    std::lock_guard lockGurad(mtx) mtx未被当前线程锁住
    std::lock_guard lockGurad(mtx, std::adopt_lock) mtx已被当前线索锁住
    注意区分上面两种构造方式，避免产生死锁
    
std::unique_lock
    unique_lock可以代替lock_guard使用，另外相比较lock_guard，unique_lock为操作者提供了更灵活的上锁解锁功能
    
    default (1)	
        unique_lock() noexcept;
    locking (2)	
        explicit unique_lock(mutex_type& m);
    try-locking (3)	
        unique_lock(mutex_type& m, try_to_lock_t tag);
    deferred (4)	
        unique_lock(mutex_type& m, defer_lock_t tag) noexcept;
    adopting (5)	
        unique_lock(mutex_type& m, adopt_lock_t tag);
    locking for (6)	
        template <class Rep, class Period>
    unique_lock(mutex_type& m, const chrono::duration<Rep,Period>& rel_time);
    locking until (7)	
        template <class Clock, class Duration>
        unique_lock(mutex_type& m, const chrono::time_point<Clock,Duration>& abs_time);
    copy [deleted] (8)	
        unique_lock(const unique_lock&) = delete;
    move (9)	
        unique_lock(unique_lock&& x);
    下面我们来分别介绍以上各个构造函数：

    (1) 默认构造函数
        新创建的 unique_lock 对象不管理任何 Mutex 对象。
    (2) locking 初始化
        新创建的 unique_lock 对象管理 Mutex 对象 m，并尝试调用 m.lock() 对 Mutex 对象进行上锁，如果此时另外某个 unique_lock 对象已经管理了该 Mutex 对象 m，则当前线程将会被阻塞。
    (3) try-locking 初始化
        新创建的 unique_lock 对象管理 Mutex 对象 m，并尝试调用 m.try_lock() 对 Mutex 对象进行上锁，但如果上锁不成功，并不会阻塞当前线程。
    (4) deferred 初始化
        新创建的 unique_lock 对象管理 Mutex 对象 m，但是在初始化的时候并不锁住 Mutex 对象。  m 应该是一个没有当前线程锁住的 Mutex 对象。
    (5) adopting 初始化
        新创建的 unique_lock 对象管理 Mutex 对象 m，  m 应该是一个已经被当前线程锁住的 Mutex 对象。(并且当前新创建的 unique_lock 对象拥有对锁(Lock)的所有权)。
    (6) locking 一段时间(duration)
        新创建的 unique_lock 对象管理 Mutex 对象 m，并试图通过调用 m.try_lock_for(rel_time) 来锁住 Mutex 对象一段时间(rel_time)。
    (7) locking 直到某个时间点(time point)
        新创建的 unique_lock 对象管理 Mutex 对象m，并试图通过调用 m.try_lock_until(abs_time) 来在某个时间点(abs_time)之前锁住 Mutex 对象。
    (8) 拷贝构造 [被禁用]
        unique_lock 对象不能被拷贝构造。
    (9) 移动(move)构造
        新创建的 unique_lock 对象获得了由 x 所管理的 Mutex 对象的所有权(包括当前 Mutex 的状态)。调用 move 构造之后，  x 对象如同通过默认构造函数所创建的，就不再管理任何 Mutex 对象了。
    综上所述，由 (2) 和 (5) 创建的 unique_lock 对象通常拥有 Mutex 对象的锁。而通过 (1) 和 (4) 创建的则不会拥有锁。通过 (3)，(6) 和 (7) 创建的 unique_lock 对象，则在 lock 成功时获得锁。

std::lock
    lock支持对多个锁锁定，并且避免死锁的出现
    
std::try_lock
    try_lock支持尝试对多个互斥量进行锁定，尝试锁定成功返回-1，否则返回锁定失败的互斥量的位置，例如第一个锁定失败返回0、第二个失败返回1

std::call_once
    保证某个函数只会被执行一次，需要与std::once_flag配合使用
    

备注：deadlock产生代码
    #include <iostream>
    #include <thread>
    #include <mutex>

    #define PRINT(x) std::cout << x << std::endl

    std::mutex mtx1, mtx2;

    void PrintSym1(const char sym)
    {
        std::lock_guard<std::mutex> lck1(mtx1);
        for(int i=0; i<50; i++)
        {
            std::cout << sym;
        }
        std::cout << '\n';
        std::lock_guard<std::mutex> lck2(mtx2);
    }
    void PrintSym2(const char sym)
    {
        std::lock_guard<std::mutex> lck2(mtx2);
        for(int i=0; i<50; i++)
        {
            std::cout << sym;
        }
        std::cout << '\n';
        std::lock_guard<std::mutex> lck1(mtx1);
    }

    int main()
    {
        std::thread t1(PrintSym1, '*');
        std::thread t2(PrintSym2, '#');
        t1.join();
        t2.join();

        return 0;
    }



















