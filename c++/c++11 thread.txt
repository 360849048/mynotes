创建并启动一个新线程
    std::thread t(function, args...)    // function是一个函数指针，args...为function的参数
    
当线程启动后，一定要在和线程相关联的thread销毁前，确定以何种方式等待线程执行结束。C++11有两种方式来等待线程结束
    * detach方式，启动的线程自主在后台运行，当前的代码继续往下执行，不等待新线程结束。
    * join方式，等待启动的线程完成，才会继续往下执行。

每个线程都一个标识，可以调用get_id获取
    * 通过thread的实例调用get_id()直接获取
    * 在当前线程上调用this_thread::get_id()获取

注意：创建的新线程对当前作用域的变量的使用，创建新线程的作用域结束后，有可能线程仍然在执行，这时局部变量随着作用域的完成都已销毁，如果线程继续使用局部变量的引用或者指针，会出现意想不到的错误，并且这种错误很难排查

注意：向线程函数传递参数，线程默认是以拷贝的方式传递参数的，当期望传入一个引用时，要使用std::ref进行转换

注意：对于已经调用了join或detach的线程，不可以再次调用join或detach。可以用joinale()判断是否可以join或detach，可以返回true，否则返回false
