L0 ~ L5
L0：仅提供警告和瞬时辅助。比如：自动紧急制动，视觉盲点提醒，车身稳定系统
L1：巡航定速（ACC），巡航装置可以纵向控制车辆，可以加加速减速。
L2：车道保持辅助（Lane Keeping），系统可以纵向控制也可以横向控制汽车，但车是辅助，人是主导
（L2.5：可以提供简单路况下的自主变道能力）
L3：在L2的基础上提供变道能力，在某一时段内车是责任主体
L4：相当于全无人驾驶，大部分时间都有车来主导。waymo，百度都属于L4级别的
L5：驾驶能力几乎和人类没有关系，L5的车辆没有方向盘和脚踏板以及其他接管设备

权责问题？
	2017提出的RSS模型
		责任敏感安全模型
		为自动驾驶汽车与人类的责任概念提供具体可衡量的参数。通过对所有记录在案的交通事故所涉及的行为和环境进行分析统计，为自动驾驶汽车界定一个可计量的“安全状态”
		软件能够做出最安全的决策
	
无人车对时效性提出的要求

无人车和无人车的区别
	无人机的难点在于控制，在于自身的稳定性控制，但很少关注动态的物体
	无人车难点在于如何与人交互（路口遇到行人，车和行人如何交互？）
	
	
自动驾驶硬件
	感知传感器
		摄像头：广泛用于物体识别和物体追踪场景，比如车道线和交通灯的识别，一般无人车安装环视多枚摄像头
		激光雷达：用于障碍物位置识别、绘制地图、辅助定位，准确率非常高
		毫米波雷达：在阴雨天、雾霾天可以辅助感知物体的位置和速度，但精度不高
		超声波：近处高敏感度传感器，通常作为安全冗余检测设备检测车辆的碰撞安全问题
	定位传感器
		IMU：实时测量自身的姿态，包含3个单轴的加速度计和3个单轴的陀螺仪（检测相对于导航坐标系的角速度信号）
		GNSS：GPS的扩展，它可以接收到所有定位卫星的信号。无人车一般使用RTK（载波相位差分技术）来进行定位，频率较低，可实现分米级的定位
	车载计算单元（IPC）
		高效连接计算单元内部各计算设备，连接外部传感器的信息输入并存储
		冗余设计，防止单点故障
		需要符合IOS-26262标准（车规、电子干扰和振动）
		故障率低
	 车辆线控系统
		电控化的零部件
		
自动驾驶软件
	流程：
		感知 -> 定位 -> 路径规划 -> 控制
	RTOS
		QNX：类似Unix系统，具有强实时性，符合车规级的硬实时操作系统
		RT Linux：Linux内核补丁，软实时操作系统
	Framework
		ROS（机器人操作系统）：B -> M
		YARP、Microsoft Robotics、MOOS、Cybertron
	高精地图
		在L4级别，HD Map是整个其他模块的数据支持
		道路网的精准三位表征，提供了很多精准的静态物体的信息
		辅助定位
		帮助传感器缩小检测范围，缩小感兴趣区域ROI，从而提高性能
		地图语义信息，可以很多弥补感知的不足
		由激光雷达绘制
		坐标系：WGS84、墨卡托坐标系
	定位
		无人车最重要的一步就是知道自己在哪
		INS：惯性导航系统
		IMU：获取自身状态后递推下一刻的位置，但是仅靠递推会产生很大的累计误差，需要结合RTK进行校准（RTK更新频率较低）
		RTK：加入静止基站，它同样也受到来自定位卫星的信号
		几何定位：激光雷达、摄像头、高精地图
	感知
		目前自动驾驶最重要的模块
		四大基本任务：
			检测：找出物体在环境中的位置
			分类：明确对象是什么，比如人、信号灯
			跟踪：随时间的持续观察移动物体并保持一直
			分割：图像中的每个像素进行合理分割，如道路、汽车、天空，要求边界清晰
		感知数据来源：图像、点云、雷达反射值
		
		